// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnClocService.Infrastructure.DataStorage;

#nullable disable

namespace OnClocService.Portal.Migrations
{
    [DbContext(typeof(OnClocDataStorageContext))]
    [Migration("20240903083542_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerFeedbackQuestion", b =>
                {
                    b.Property<int>("CustomerFeedbackQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerFeedbackQuestionID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerFeedbackQuestionID");

                    b.ToTable("CustomerFeedbackQuestions");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerProfile", b =>
                {
                    b.Property<Guid>("CustomerProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemsContactDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerProfileID");

                    b.HasIndex("SystemsContactDetailId");

                    b.HasIndex("SystemsUserId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceRating", b =>
                {
                    b.Property<Guid>("CustomerServiceRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerFeedbackQuestionId")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.HasKey("CustomerServiceRatingID");

                    b.HasIndex("CustomerFeedbackQuestionId");

                    b.HasIndex("CustomerServiceTicketId");

                    b.ToTable("CustomerServiceRatings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceTicket", b =>
                {
                    b.Property<Guid>("CustomerServiceTicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ServiceRating")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerServiceTicketID");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("CustomerServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.CustomerEquipment", b =>
                {
                    b.Property<Guid>("CustomerEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EquipmentBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EquipmentCount")
                        .HasColumnType("float");

                    b.Property<string>("EquipmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentFamilyId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentPartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerEquipmentID");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("EquipmentBrandId");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("EquipmentFamilyId");

                    b.HasIndex("EquipmentGroupId");

                    b.ToTable("CustomerEquipment");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentBrand", b =>
                {
                    b.Property<int>("EquipmentBrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentBrandID"));

                    b.Property<string>("BrandCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentManufacturerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentBrandID");

                    b.HasIndex("EquipmentManufacturerId");

                    b.ToTable("EquipmentBrands");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", b =>
                {
                    b.Property<int>("EquipmentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategorytName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentCategoryID");

                    b.ToTable("EquipmentCategories");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategoryGroup", b =>
                {
                    b.Property<int>("EquipmentCategoryGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentCategoryGroupID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentCategoryGroupID");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("EquipmentGroupId");

                    b.ToTable("EquipmentCategoryGroups");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamily", b =>
                {
                    b.Property<int>("EquipmentFamilyID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentFamilyID");

                    b.ToTable("EquipmentFamilies");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamilyCategory", b =>
                {
                    b.Property<int>("EquipmentFamilyCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentFamilyCategoryID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentFamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentFamilyCategoryID");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("EquipmentFamilyId");

                    b.ToTable("EquipmentFamilyCategories");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentGroup", b =>
                {
                    b.Property<int>("EquipmentGroupID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentGroupID");

                    b.ToTable("EquipmentGroups");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentManufacturer", b =>
                {
                    b.Property<int>("EquipmentManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentManufacturerID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentManufacturerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentManufacturerID");

                    b.ToTable("EquipmentManufacturers");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.StockProduct", b =>
                {
                    b.Property<Guid>("StockProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AveragePrice")
                        .HasColumnType("float");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentFamilyId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<double>("InventoryCount")
                        .HasColumnType("float");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockWarehouseId")
                        .HasColumnType("int");

                    b.HasKey("StockProductID");

                    b.HasIndex("EquipmentBrandId");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("EquipmentFamilyId");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("StockWarehouseId");

                    b.ToTable("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.StockWarehouse", b =>
                {
                    b.Property<int>("StockWarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockWarehouseID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockWarehouseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockWarehouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockWarehouseID");

                    b.ToTable("StockWarehouses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoice", b =>
                {
                    b.Property<Guid>("CustomerInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemsBusinessCurrencyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemsBusinessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalInvoiceAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalTaxDue")
                        .HasColumnType("float");

                    b.HasKey("CustomerInvoiceID");

                    b.HasIndex("SystemsBusinessCurrencyID");

                    b.HasIndex("SystemsBusinessProfileId");

                    b.ToTable("CustomerInvoices");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoiceTaxation", b =>
                {
                    b.Property<Guid>("CustomerInvoiceTaxationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TaxDue")
                        .HasColumnType("float");

                    b.Property<double>("TaxableAmount")
                        .HasColumnType("float");

                    b.Property<int>("TaxationTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceTaxationID");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("TaxationTypeId");

                    b.ToTable("CustomerInvoiceTaxations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerPayment", b =>
                {
                    b.Property<Guid>("CustomerPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SystemsBusinessCurrencyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemsBusinessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalAmountDue")
                        .HasColumnType("float");

                    b.Property<double>("TotalPaidAmount")
                        .HasColumnType("float");

                    b.HasKey("CustomerPaymentID");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SystemsBusinessCurrencyID");

                    b.HasIndex("SystemsBusinessProfileId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.TaxationType", b =>
                {
                    b.Property<int>("TaxationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxationTypeID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxationRate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaxationTypeID");

                    b.ToTable("TaxationTypes");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCard", b =>
                {
                    b.Property<Guid>("JobCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ActualDuration")
                        .HasColumnType("time");

                    b.Property<bool>("AllowReOpen")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardClassId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGenreId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardPriorityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceProjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCardID");

                    b.HasIndex("JobCardCategoryId");

                    b.HasIndex("JobCardClassId");

                    b.HasIndex("JobCardGenreId");

                    b.HasIndex("JobCardGroupId");

                    b.HasIndex("JobCardPriorityLevelId");

                    b.HasIndex("JobCardStatusId");

                    b.HasIndex("JobCardTypeId");

                    b.HasIndex("ServiceProjectId");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("JobCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardAllocation", b =>
                {
                    b.Property<Guid>("JobCardAllocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignOnDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryTechnician")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceDeskMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ServiceLevelDuration")
                        .HasColumnType("time");

                    b.HasKey("JobCardAllocationID");

                    b.HasIndex("JobCardId");

                    b.HasIndex("ServiceDeskMemberId");

                    b.ToTable("JobCardsAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", b =>
                {
                    b.Property<int>("JobCardCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardCategoryID");

                    b.ToTable("JobCardCategories");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardCategoryClass", b =>
                {
                    b.Property<int>("JobCardCategoryClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardCategoryClassID"));

                    b.Property<int>("JobCardCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardClassId")
                        .HasColumnType("int");

                    b.HasKey("JobCardCategoryClassID");

                    b.HasIndex("JobCardCategoryId");

                    b.HasIndex("JobCardClassId");

                    b.ToTable("JobCardCategoryClasses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", b =>
                {
                    b.Property<int>("JobCardClassID")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardClassID");

                    b.ToTable("JobCardClasses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardClassGroup", b =>
                {
                    b.Property<int>("JobCardClassGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardClassGroupID"));

                    b.Property<int>("JobCardClassId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGroupId")
                        .HasColumnType("int");

                    b.HasKey("JobCardClassGroupID");

                    b.HasIndex("JobCardClassId");

                    b.HasIndex("JobCardGroupId");

                    b.ToTable("JobCardClassGroups");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGenre", b =>
                {
                    b.Property<int>("JobCardGenreID")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardGenreID");

                    b.ToTable("JobCardGenres");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", b =>
                {
                    b.Property<int>("JobCardGroupID")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardGroupID");

                    b.ToTable("JobCardGroups");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGroupGenre", b =>
                {
                    b.Property<int>("JobCardGroupGenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardGroupGenreID"));

                    b.Property<int>("JobCardGenreId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGroupId")
                        .HasColumnType("int");

                    b.HasKey("JobCardGroupGenreID");

                    b.HasIndex("JobCardGenreId");

                    b.HasIndex("JobCardGroupId");

                    b.ToTable("JobCardGroupGenres");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardPriorityLevel", b =>
                {
                    b.Property<int>("JobCardPriorityLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardPriorityLevelID"));

                    b.Property<bool>("AllowEscalation")
                        .HasColumnType("bit");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EscalationTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityIndex")
                        .HasColumnType("int");

                    b.Property<string>("PriorityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCardPriorityLevelID");

                    b.ToTable("JobCardPriorityLevels");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardStatus", b =>
                {
                    b.Property<int>("JobCardStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardStatusID"));

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardStatusID");

                    b.ToTable("JobCardStatuses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardType", b =>
                {
                    b.Property<int>("JobCardTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCardTypeID");

                    b.ToTable("JobCardTypes");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardTypeCategory", b =>
                {
                    b.Property<int>("JobCardTypeCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardTypeCategoryID"));

                    b.Property<int>("JobCardCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("JobCardTypeCategoryID");

                    b.HasIndex("JobCardCategoryId");

                    b.HasIndex("JobCardTypeId");

                    b.ToTable("JobCardTypeCategories");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.ServiceProject", b =>
                {
                    b.Property<int>("ServiceProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceProjectID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceProjectID");

                    b.ToTable("ServiceProjects");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsActivityLog", b =>
                {
                    b.Property<Guid>("SystemsActivityLogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemsActivityLogID");

                    b.ToTable("SystemsActivityLogs");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsAuditEvent", b =>
                {
                    b.Property<Guid>("SystemsAuditEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsActivityLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemsModuleId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SystemsPageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SystemsAuditEventID");

                    b.HasIndex("SystemsActivityLogId");

                    b.HasIndex("SystemsModuleId");

                    b.HasIndex("SystemsPageId");

                    b.ToTable("SystemsAuditEvents");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsAuthenticationTicket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastActivity")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperatingSystemFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgentFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgentVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Value")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("TicketID");

                    b.ToTable("SystemsAuthenticationTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessCurrency", b =>
                {
                    b.Property<Guid>("SystemsBusinessCurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBaseCurrency")
                        .HasColumnType("bit");

                    b.Property<Guid>("SystemsBusinessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemsCurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("SystemsBusinessCurrencyID");

                    b.HasIndex("SystemsBusinessProfileId");

                    b.HasIndex("SystemsCurrencyId");

                    b.ToTable("SystemsBusinessCurrencies");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessLicense", b =>
                {
                    b.Property<Guid>("SystemsBusinessLicenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LicenseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LicenseStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemsBusinessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemsBusinessLicenseID");

                    b.HasIndex("SystemsBusinessProfileId");

                    b.ToTable("SystemsBusinessLicenses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", b =>
                {
                    b.Property<Guid>("SystemsBusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVatEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuoteNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsBusinessFullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsBusinessLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsBusinessShortname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsContactDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsBusinessID");

                    b.HasIndex("SystemsContactDetailId");

                    b.ToTable("SystemsBusinessProfiles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsChangeLog", b =>
                {
                    b.Property<Guid>("SystemsChangeLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChangeStatus")
                        .HasColumnType("int");

                    b.Property<string>("ChangedToValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsAuditEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemsChangeLogID");

                    b.HasIndex("SystemsAuditEventId");

                    b.ToTable("SystemsChangeLogs");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCity", b =>
                {
                    b.Property<Guid>("SystemCityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsCountryId")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("SystemCityID");

                    b.HasIndex("SystemsCountryId");

                    b.ToTable("SystemsCities");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsContactDetail", b =>
                {
                    b.Property<Guid>("SystemsContactDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryContact")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemsCountryId")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsContactDetailID");

                    b.HasIndex("SystemCityId");

                    b.HasIndex("SystemsCountryId");

                    b.ToTable("SystemsContactDetails");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCountry", b =>
                {
                    b.Property<string>("SystemsCountryID")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("SystemsCountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsCountryShortCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SystemsCurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("SystemsCountryID");

                    b.HasIndex("SystemsCurrencyId");

                    b.ToTable("SystemsCountries");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCountryPhoneCode", b =>
                {
                    b.Property<Guid>("SystemsCountryPhoneCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemsCountryId")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("SystemsCountryPhoneDialCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SystemsCountryPhoneCodeID");

                    b.HasIndex("SystemsCountryId");

                    b.ToTable("SystemsCountryPhoneCodes");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCurrency", b =>
                {
                    b.Property<string>("SystemsCurrencyID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("PrefixCurrencySymbol")
                        .HasColumnType("bit");

                    b.Property<bool>("SurfixCurrencySymbol")
                        .HasColumnType("bit");

                    b.Property<string>("SystemsCurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemsCurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsCurrencyID");

                    b.ToTable("SystemsCurrencies");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsModule", b =>
                {
                    b.Property<string>("SystemsModuleID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AspArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableMenuItem")
                        .HasColumnType("bit");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefaultModule")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentModuleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsModuleID");

                    b.ToTable("SystemsModules");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsNotification", b =>
                {
                    b.Property<Guid>("SystemsNotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Expiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LinkToAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SentSuccessfully")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemsNotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("SystemsNotificationID");

                    b.HasIndex("SystemsNotificationTypeId");

                    b.ToTable("SystemsNotifications");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsNotificationType", b =>
                {
                    b.Property<int>("SystemsNotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemsNotificationTypeID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.HasKey("SystemsNotificationTypeID");

                    b.ToTable("SystemsNotificationTypes");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsPage", b =>
                {
                    b.Property<string>("SystemsPageID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AspPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspParentFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableMenuItem")
                        .HasColumnType("bit");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefaultPage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.Property<string>("SystemsModuleId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsPageID");

                    b.HasIndex("SystemsModuleId");

                    b.ToTable("SystemsPages");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsRefreshToken", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Expiry")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Revoked")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenID");

                    b.ToTable("SystemsRefreshTokens");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemsSettings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsUserNotification", b =>
                {
                    b.Property<Guid>("SystemsUserNotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemsNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemsUserNotificationID");

                    b.HasIndex("SystemsNotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemsUserNotifications");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklist", b =>
                {
                    b.Property<Guid>("JobCardChecklistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChecklistDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ChecklistDuration")
                        .HasColumnType("time");

                    b.Property<string>("ChecklistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardChecklistTemplateId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobCardChecklistID");

                    b.HasIndex("JobCardChecklistTemplateId");

                    b.HasIndex("JobCardId");

                    b.ToTable("JobCardChecklists");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTask", b =>
                {
                    b.Property<Guid>("JobCardChecklistTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobCardChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceOfficerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TaskCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("TechnicalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCardChecklistTaskID");

                    b.HasIndex("JobCardChecklistId");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("ServiceOfficerProfileId");

                    b.ToTable("JobCardChecklistTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplate", b =>
                {
                    b.Property<int>("JobCardChecklistTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCardChecklistTemplateID"));

                    b.Property<string>("ChecklistDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChecklistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCardChecklistTemplateID");

                    b.ToTable("JobCardChecklistTemplates");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplateTask", b =>
                {
                    b.Property<Guid>("JobCardChecklistTemplateTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardChecklistTemplateId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobCardChecklistTemplateTaskID");

                    b.HasIndex("JobCardChecklistTemplateId");

                    b.HasIndex("JobTaskId");

                    b.ToTable("JobCardChecklistTemplateTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobTask", b =>
                {
                    b.Property<Guid>("JobTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TaskDuration")
                        .HasColumnType("time");

                    b.Property<DateTime>("TaskEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskStart")
                        .HasColumnType("datetime2");

                    b.HasKey("JobTaskID");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobTaskStep", b =>
                {
                    b.Property<Guid>("JobTaskStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTaskStepID");

                    b.HasIndex("JobTaskId");

                    b.ToTable("JobTaskSteps");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDesk", b =>
                {
                    b.Property<int>("ServiceDeskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceDeskID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceDeskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDeskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceDeskID");

                    b.ToTable("ServiceDesks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskMember", b =>
                {
                    b.Property<Guid>("ServiceDeskMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceDeskId")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceOfficerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceDeskMemberID");

                    b.HasIndex("ServiceDeskId");

                    b.HasIndex("ServiceOfficerProfileId");

                    b.ToTable("ServiceDeskMembers");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskPortfolio", b =>
                {
                    b.Property<int>("ServiceDeskProtfolioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceDeskProtfolioID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardClassId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGenreId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobCardTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("ManageJobCardCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageJobCardClass")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageJobCardGenre")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageJobCardGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageJobCardType")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageServiceTicketCategory")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceDeskId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ServiceDeskProtfolioID");

                    b.HasIndex("JobCardCategoryId");

                    b.HasIndex("JobCardClassId");

                    b.HasIndex("JobCardGenreId");

                    b.HasIndex("JobCardGroupId");

                    b.HasIndex("JobCardTypeId");

                    b.HasIndex("ServiceDeskId");

                    b.HasIndex("ServiceTicketCategoryId");

                    b.ToTable("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskProjectAllocation", b =>
                {
                    b.Property<int>("ServiceProjectDeskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceProjectDeskID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceDeskId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceProjectId")
                        .HasColumnType("int");

                    b.HasKey("ServiceProjectDeskID");

                    b.HasIndex("ServiceDeskId");

                    b.HasIndex("ServiceProjectId");

                    b.ToTable("ServiceDeskProjectAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerDesignation", b =>
                {
                    b.Property<int>("ServiceOfficerDesignationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceOfficerDesignationID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceOfficerDesignationID");

                    b.ToTable("ServiceOfficerDesignations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", b =>
                {
                    b.Property<Guid>("ServiceOfficerProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthorizerLevel")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InputterLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceOfficerDesignationId")
                        .HasColumnType("int");

                    b.Property<Guid>("SystemsContactDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceOfficerProfileID");

                    b.HasIndex("ServiceOfficerDesignationId");

                    b.HasIndex("SystemsContactDetailId");

                    b.HasIndex("SystemsUserId");

                    b.ToTable("ServiceOfficerProfiles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", b =>
                {
                    b.Property<Guid>("ServiceTicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowTransition")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ClosedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpenedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTicketCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketPriorityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTicketID");

                    b.HasIndex("ServiceTicketCategoryId");

                    b.HasIndex("ServiceTicketPriorityLevelId");

                    b.HasIndex("ServiceTicketStatusId");

                    b.ToTable("ServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAllocation", b =>
                {
                    b.Property<Guid>("ServiceTicketAllocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignOnDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceDeskMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ServiceLevelDuration")
                        .HasColumnType("time");

                    b.Property<Guid>("ServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceTicketAllocationID");

                    b.HasIndex("ServiceDeskMemberId");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("ServiceTicketAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAttachment", b =>
                {
                    b.Property<Guid>("ServiceTicketAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceTicketAttachmentID");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("ServiceTicketAttachments");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketCategory", b =>
                {
                    b.Property<int>("ServiceTicketCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTicketCategoryID"));

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceTicketCategoryID");

                    b.ToTable("ServiceTicketCategories");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketPriorityLevel", b =>
                {
                    b.Property<int>("ServiceTicketPriorityLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTicketPriorityLevelID"));

                    b.Property<bool>("AllowEscalation")
                        .HasColumnType("bit");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EscalationTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityIndex")
                        .HasColumnType("int");

                    b.Property<string>("PriorityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTicketPriorityLevelID");

                    b.ToTable("ServiceTicketPriorityLevels");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketStatus", b =>
                {
                    b.Property<int>("ServiceTicketStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTicketStatusID"));

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceTicketStatusID");

                    b.ToTable("ServiceTicketStatuses");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTask", b =>
                {
                    b.Property<Guid>("ServiceTicketTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceOfficerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceTicketAllocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TaskCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("TechnicalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTicketTaskID");

                    b.HasIndex("ServiceOfficerProfileId");

                    b.HasIndex("ServiceTicketAllocationID");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("ServiceTicketTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTaskStep", b =>
                {
                    b.Property<Guid>("CustomerServiceTicketTaskStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTicketTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepsTaken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerServiceTicketTaskStepID");

                    b.HasIndex("ServiceTicketTaskId");

                    b.ToTable("ServiceTicketTaskSteps");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.JobTimeCard", b =>
                {
                    b.Property<Guid>("JobTimeCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ISApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TravelIteneraryDuration")
                        .HasColumnType("time");

                    b.Property<Guid>("TravelIteneraryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTimeCardID");

                    b.HasIndex("JobCardId");

                    b.HasIndex("TravelIteneraryId");

                    b.ToTable("JobTimeCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelEvent", b =>
                {
                    b.Property<int>("TravelEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelEventID"));

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelEventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelEventName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TravelEventID");

                    b.ToTable("TravelEvents");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelItenerary", b =>
                {
                    b.Property<Guid>("TravelIteneraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeAccuracy")
                        .HasColumnType("float");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LongitudeAccuracy")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelEventId")
                        .HasColumnType("int");

                    b.Property<Guid>("TravelPlanBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelIteneraryID");

                    b.HasIndex("TravelEventId");

                    b.HasIndex("TravelPlanBookingId");

                    b.ToTable("TravelIteneraries");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelPlan", b =>
                {
                    b.Property<Guid>("TravelPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelPlanDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelPlanDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelPlanSubject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TravelPlanID");

                    b.ToTable("TravelPlans");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelPlanBooking", b =>
                {
                    b.Property<Guid>("TravelPlanBookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeferredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeferred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceOfficerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TravelPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelPlanBookingID");

                    b.HasIndex("ServiceOfficerProfileId");

                    b.HasIndex("TravelPlanId");

                    b.ToTable("TravelPlanBookings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsFunctionalRole", b =>
                {
                    b.Property<Guid>("FunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionalRoleId");

                    b.ToTable("SystemsFunctionalRoles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SystemsRoles", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemsRoleClaims", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRoleFunctionalRole", b =>
                {
                    b.Property<Guid>("RoleFunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthorizationLevel")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FunctionalRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleFunctionalRoleId");

                    b.HasIndex("FunctionalRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemsRoleFunctionalRoles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatorFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBuiltInSystemsUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsBusinessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SystemsBusinessProfileId");

                    b.ToTable("SystemsUsers", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserName")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemsUserClaims", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserDevice", b =>
                {
                    b.Property<Guid>("SystemsUserDeviceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPUArchitecture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceVendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsUserDeviceID");

                    b.ToTable("SystemsUserDevices");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserDeviceLogin", b =>
                {
                    b.Property<Guid>("SystemsUserDeviceLoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserMajor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserUniqueID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemsUserDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemsUserDeviceLoginID");

                    b.HasIndex("SystemsUserDeviceId");

                    b.ToTable("SystemsUserDeviceLogins");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserName")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("SystemsUserLogins", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserName")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemsUserRoles", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserName")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("SystemsUserTokens", (string)null);
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerProfile", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsContactDetail", "SystemsContactDetail")
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("SystemsContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", null)
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("SystemsUserId");

                    b.Navigation("SystemsContactDetail");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceRating", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.CustomerRegistry.CustomerFeedbackQuestion", "CustomerFeedbackQuestion")
                        .WithMany("CustomerServiceRatings")
                        .HasForeignKey("CustomerFeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceTicket", "CustomerServiceTicket")
                        .WithMany("CustomerServiceRatings")
                        .HasForeignKey("CustomerServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerFeedbackQuestion");

                    b.Navigation("CustomerServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceTicket", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.CustomerRegistry.CustomerProfile", "CustomerProfile")
                        .WithMany("CustomerServiceTickets")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", "ServiceTicket")
                        .WithMany("CustomerServiceTickets")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.CustomerEquipment", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.CustomerRegistry.CustomerProfile", "CustomerProfile")
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentBrand", "EquipmentBrand")
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("EquipmentBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", "EquipmentCategory")
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamily", "EquipmentFamily")
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("EquipmentFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentGroup", "EquipmentGroup")
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("EquipmentBrand");

                    b.Navigation("EquipmentCategory");

                    b.Navigation("EquipmentFamily");

                    b.Navigation("EquipmentGroup");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentBrand", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentManufacturer", "EquipmentManufacturer")
                        .WithMany("EquipmentBrands")
                        .HasForeignKey("EquipmentManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentManufacturer");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategoryGroup", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", "EquipmentCategory")
                        .WithMany("EquipmentCategoryGroups")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentGroup", "EquipmentGroup")
                        .WithMany("EquipmentCategoryGroups")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");

                    b.Navigation("EquipmentGroup");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamilyCategory", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", "EquipmentCategory")
                        .WithMany("EquipmentFamilyCategories")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamily", "EquipmentFamily")
                        .WithMany("EquipmentFamilyCategories")
                        .HasForeignKey("EquipmentFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");

                    b.Navigation("EquipmentFamily");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.StockProduct", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentBrand", "ProductBrand")
                        .WithMany("StockProducts")
                        .HasForeignKey("EquipmentBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", "EquipmentCategory")
                        .WithMany("StockProducts")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamily", "EquipmentFamily")
                        .WithMany("StockProducts")
                        .HasForeignKey("EquipmentFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.EquipmentGroup", "ProductGroup")
                        .WithMany("StockProducts")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.EquipmentRegistry.StockWarehouse", "StockWarehouse")
                        .WithMany("StockProducts")
                        .HasForeignKey("StockWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");

                    b.Navigation("EquipmentFamily");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductGroup");

                    b.Navigation("StockWarehouse");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoice", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessCurrency", null)
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("SystemsBusinessCurrencyID");

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", "SystemsBusinessProfile")
                        .WithMany()
                        .HasForeignKey("SystemsBusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsBusinessProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoiceTaxation", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoice", "CustomerInvoice")
                        .WithMany("CustomerInvoiceTaxations")
                        .HasForeignKey("CustomerInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.PaymentRegistry.TaxationType", "TaxationType")
                        .WithMany("CustomerInvoiceTaxations")
                        .HasForeignKey("TaxationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInvoice");

                    b.Navigation("TaxationType");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerPayment", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.PaymentRegistry.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessCurrency", null)
                        .WithMany("CustomerPayments")
                        .HasForeignKey("SystemsBusinessCurrencyID");

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", "SystemsBusinessProfile")
                        .WithMany()
                        .HasForeignKey("SystemsBusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("SystemsBusinessProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCard", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", "JobCardCategory")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", "JobCardClass")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGenre", "JobCardGenre")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", "JobCardGroup")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardPriorityLevel", "JobCardPriorityLevel")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardPriorityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardStatus", "JobCardStatus")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardType", "JobCardType")
                        .WithMany("JobCards")
                        .HasForeignKey("JobCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.ServiceProject", "ServiceProject")
                        .WithMany("JobCards")
                        .HasForeignKey("ServiceProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", "ServiceTicket")
                        .WithMany("JobCards")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardCategory");

                    b.Navigation("JobCardClass");

                    b.Navigation("JobCardGenre");

                    b.Navigation("JobCardGroup");

                    b.Navigation("JobCardPriorityLevel");

                    b.Navigation("JobCardStatus");

                    b.Navigation("JobCardType");

                    b.Navigation("ServiceProject");

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardAllocation", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCard", "JobCard")
                        .WithMany("JobCardAllocations")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskMember", "ServiceDeskMember")
                        .WithMany("JobCardAllocations")
                        .HasForeignKey("ServiceDeskMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCard");

                    b.Navigation("ServiceDeskMember");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardCategoryClass", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", "JobCardCategory")
                        .WithMany("JobCardCategoryClasses")
                        .HasForeignKey("JobCardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", "JobCardClass")
                        .WithMany("JobCardCategoryClasses")
                        .HasForeignKey("JobCardClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardCategory");

                    b.Navigation("JobCardClass");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardClassGroup", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", "JobCardClass")
                        .WithMany("JobCardClassGroups")
                        .HasForeignKey("JobCardClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", "JobCardGroup")
                        .WithMany("JobCardClassGroups")
                        .HasForeignKey("JobCardGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardClass");

                    b.Navigation("JobCardGroup");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGroupGenre", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGenre", "JobCardGenre")
                        .WithMany("JobCardGroupGenres")
                        .HasForeignKey("JobCardGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", "JobCardGroup")
                        .WithMany("JobCardGroupGenres")
                        .HasForeignKey("JobCardGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardGenre");

                    b.Navigation("JobCardGroup");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardTypeCategory", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", "JobCardCategory")
                        .WithMany("JobCardTypeCategories")
                        .HasForeignKey("JobCardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardType", "JobCardType")
                        .WithMany("JobCardTypeCategories")
                        .HasForeignKey("JobCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardCategory");

                    b.Navigation("JobCardType");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsActivityLog", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "SystemsUser")
                        .WithMany("SystemsActivityLogs")
                        .HasForeignKey("SystemsActivityLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsUser");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsAuditEvent", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsActivityLog", "SystemsActivityLog")
                        .WithMany("SystemsAuditEvents")
                        .HasForeignKey("SystemsActivityLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsModule", "SystemsModule")
                        .WithMany("SystemsAuditEvents")
                        .HasForeignKey("SystemsModuleId");

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsPage", "SystemsPage")
                        .WithMany("SystemsAuditEvents")
                        .HasForeignKey("SystemsPageId");

                    b.Navigation("SystemsActivityLog");

                    b.Navigation("SystemsModule");

                    b.Navigation("SystemsPage");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessCurrency", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", "SystemsBusinessProfile")
                        .WithMany("SystemsBusinessCurrencies")
                        .HasForeignKey("SystemsBusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCurrency", "SystemsCurrency")
                        .WithMany()
                        .HasForeignKey("SystemsCurrencyId");

                    b.Navigation("SystemsBusinessProfile");

                    b.Navigation("SystemsCurrency");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessLicense", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", "SystemsBusinessProfile")
                        .WithMany("SystemsBusinessLicenses")
                        .HasForeignKey("SystemsBusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsBusinessProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsContactDetail", "SystemsContactDetail")
                        .WithMany("SystemsBusinessProfiles")
                        .HasForeignKey("SystemsContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsContactDetail");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsChangeLog", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsAuditEvent", "SystemsAuditEvent")
                        .WithMany("SystemsChangeLogs")
                        .HasForeignKey("SystemsAuditEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsAuditEvent");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCity", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCountry", "SystemsCountry")
                        .WithMany("SystemsCities")
                        .HasForeignKey("SystemsCountryId");

                    b.Navigation("SystemsCountry");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsContactDetail", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCity", "SystemsCity")
                        .WithMany("SystemsContactDetails")
                        .HasForeignKey("SystemCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCountry", "SystemsCountry")
                        .WithMany("SystemsContactDetails")
                        .HasForeignKey("SystemsCountryId");

                    b.Navigation("SystemsCity");

                    b.Navigation("SystemsCountry");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCountry", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCurrency", "SystemsCurrency")
                        .WithMany("SystemsCountries")
                        .HasForeignKey("SystemsCurrencyId");

                    b.Navigation("SystemsCurrency");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCountryPhoneCode", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsCountry", "SystemsCountry")
                        .WithMany("SystemsCountryPhoneCodes")
                        .HasForeignKey("SystemsCountryId");

                    b.Navigation("SystemsCountry");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsNotification", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsNotificationType", "SystemsNotificationType")
                        .WithMany("SystemsNotifications")
                        .HasForeignKey("SystemsNotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsNotificationType");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsPage", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsModule", "SystemsModule")
                        .WithMany("SystemsPages")
                        .HasForeignKey("SystemsModuleId");

                    b.Navigation("SystemsModule");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsUserNotification", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsNotification", "SystemsNotification")
                        .WithMany("SystemsUserNotifications")
                        .HasForeignKey("SystemsNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "SystemsUser")
                        .WithMany("SystemsUserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsNotification");

                    b.Navigation("SystemsUser");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklist", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplate", "JobCardChecklistTemplate")
                        .WithMany("JobCardChecklists")
                        .HasForeignKey("JobCardChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCard", "JobCard")
                        .WithMany("JobCardChecklists")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCard");

                    b.Navigation("JobCardChecklistTemplate");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTask", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobCardChecklist", "JobCardChecklist")
                        .WithMany("JobCardChecklistTasks")
                        .HasForeignKey("JobCardChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobTask", "JobTask")
                        .WithMany("JobCardChecklistTasks")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", "ServiceOfficerProfile")
                        .WithMany("JobCardChecklistTasks")
                        .HasForeignKey("ServiceOfficerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardChecklist");

                    b.Navigation("JobTask");

                    b.Navigation("ServiceOfficerProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplateTask", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplate", "JobCardChecklistTemplate")
                        .WithMany("JobCardChecklistTemplateTasks")
                        .HasForeignKey("JobCardChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobTask", "JobTask")
                        .WithMany("JobCardChecklistTemplateTasks")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardChecklistTemplate");

                    b.Navigation("JobTask");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobTaskStep", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TaskRegistry.JobTask", "JobTask")
                        .WithMany("JobTaskSteps")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskMember", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceDesk", "ServiceDesk")
                        .WithMany("ServiceDeskMembers")
                        .HasForeignKey("ServiceDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", "ServiceOfficerProfile")
                        .WithMany("ServiceDeskMembers")
                        .HasForeignKey("ServiceOfficerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDesk");

                    b.Navigation("ServiceOfficerProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskPortfolio", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", "JobCardCategory")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("JobCardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", "JobCardClass")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("JobCardClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGenre", "JobCardGenre")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("JobCardGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", "JobCardGroup")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("JobCardGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCardType", "JobCardType")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("JobCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceDesk", "ServiceDesk")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("ServiceDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketCategory", "ServiceTicketCategory")
                        .WithMany("ServiceDeskPortfolios")
                        .HasForeignKey("ServiceTicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCardCategory");

                    b.Navigation("JobCardClass");

                    b.Navigation("JobCardGenre");

                    b.Navigation("JobCardGroup");

                    b.Navigation("JobCardType");

                    b.Navigation("ServiceDesk");

                    b.Navigation("ServiceTicketCategory");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskProjectAllocation", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceDesk", "ServiceDesk")
                        .WithMany("ServiceDeskProjectAllocations")
                        .HasForeignKey("ServiceDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.ServiceProject", "ServiceProject")
                        .WithMany("ServiceDeskProjectAllocations")
                        .HasForeignKey("ServiceProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDesk");

                    b.Navigation("ServiceProject");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerDesignation", "ServiceOfficerDesignation")
                        .WithMany("ServiceOfficerProfiles")
                        .HasForeignKey("ServiceOfficerDesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsContactDetail", "SystemsContactDetail")
                        .WithMany("ServiceOfficerProfiles")
                        .HasForeignKey("SystemsContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", null)
                        .WithMany("ServiceOfficerProfiles")
                        .HasForeignKey("SystemsUserId");

                    b.Navigation("ServiceOfficerDesignation");

                    b.Navigation("SystemsContactDetail");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketCategory", "ServiceTicketCategory")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ServiceTicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketPriorityLevel", "ServiceTicketPriorityLevel")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ServiceTicketPriorityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketStatus", "ServiceTicketStatus")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ServiceTicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTicketCategory");

                    b.Navigation("ServiceTicketPriorityLevel");

                    b.Navigation("ServiceTicketStatus");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAllocation", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskMember", "ServiceDeskMember")
                        .WithMany("ServiceTicketAllocations")
                        .HasForeignKey("ServiceDeskMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", "ServiceTicket")
                        .WithMany("ServiceTicketAllocations")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDeskMember");

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAttachment", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", "ServiceTicket")
                        .WithMany("ServiceTicketAttachments")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTask", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", "ServiceOfficerProfile")
                        .WithMany("ServiceTicketTasks")
                        .HasForeignKey("ServiceOfficerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAllocation", null)
                        .WithMany("CustomerServiceTicketTasks")
                        .HasForeignKey("ServiceTicketAllocationID");

                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", "ServiceTicket")
                        .WithMany("ServiceTicketTasks")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceOfficerProfile");

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTaskStep", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTask", "ServiceTicketTask")
                        .WithMany("ServiceTicketTaskSteps")
                        .HasForeignKey("ServiceTicketTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTicketTask");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.JobTimeCard", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.ProjectRegistry.JobCard", "JobCard")
                        .WithMany("JobTimeCards")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TravelRegistry.TravelItenerary", "TravelItenerary")
                        .WithMany("JobTimeCards")
                        .HasForeignKey("TravelIteneraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCard");

                    b.Navigation("TravelItenerary");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelItenerary", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TravelRegistry.TravelEvent", "TravelEvent")
                        .WithMany("TravelIteneraries")
                        .HasForeignKey("TravelEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TravelRegistry.TravelPlanBooking", "TravelPlanBooking")
                        .WithMany("TravelIteneraries")
                        .HasForeignKey("TravelPlanBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelEvent");

                    b.Navigation("TravelPlanBooking");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelPlanBooking", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", "ServiceOfficerProfile")
                        .WithMany("TravelPlanBookings")
                        .HasForeignKey("ServiceOfficerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.TravelRegistry.TravelPlan", "TravelPlan")
                        .WithMany("TravelPlanBooking")
                        .HasForeignKey("TravelPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceOfficerProfile");

                    b.Navigation("TravelPlan");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRoleClaim", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRoleFunctionalRole", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsFunctionalRole", "FunctionalRole")
                        .WithMany("FunctionalRoles")
                        .HasForeignKey("FunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsRole", "Role")
                        .WithMany("FunctionalRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionalRole");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUser", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", "SystemsBusinessProfile")
                        .WithMany("SystemsUsers")
                        .HasForeignKey("SystemsBusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsBusinessProfile");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserClaim", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserDevice", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "SystemsUser")
                        .WithMany("SystemsUserDevices")
                        .HasForeignKey("SystemsUserDeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsUser");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserDeviceLogin", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUserDevice", "SystemsUserDevice")
                        .WithMany("SystemsUserDeviceLogins")
                        .HasForeignKey("SystemsUserDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsUserDevice");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserLogin", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserRole", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserToken", b =>
                {
                    b.HasOne("OnClocService.Core.Entities.UserRegistry.SystemsUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerFeedbackQuestion", b =>
                {
                    b.Navigation("CustomerServiceRatings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerProfile", b =>
                {
                    b.Navigation("CustomerEquipment");

                    b.Navigation("CustomerServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.CustomerRegistry.CustomerServiceTicket", b =>
                {
                    b.Navigation("CustomerServiceRatings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentBrand", b =>
                {
                    b.Navigation("CustomerEquipment");

                    b.Navigation("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentCategory", b =>
                {
                    b.Navigation("CustomerEquipment");

                    b.Navigation("EquipmentCategoryGroups");

                    b.Navigation("EquipmentFamilyCategories");

                    b.Navigation("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentFamily", b =>
                {
                    b.Navigation("CustomerEquipment");

                    b.Navigation("EquipmentFamilyCategories");

                    b.Navigation("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentGroup", b =>
                {
                    b.Navigation("CustomerEquipment");

                    b.Navigation("EquipmentCategoryGroups");

                    b.Navigation("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.EquipmentManufacturer", b =>
                {
                    b.Navigation("EquipmentBrands");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.EquipmentRegistry.StockWarehouse", b =>
                {
                    b.Navigation("StockProducts");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.CustomerInvoice", b =>
                {
                    b.Navigation("CustomerInvoiceTaxations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.PaymentMethod", b =>
                {
                    b.Navigation("CustomerPayments");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.PaymentRegistry.TaxationType", b =>
                {
                    b.Navigation("CustomerInvoiceTaxations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCard", b =>
                {
                    b.Navigation("JobCardAllocations");

                    b.Navigation("JobCardChecklists");

                    b.Navigation("JobTimeCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardCategory", b =>
                {
                    b.Navigation("JobCardCategoryClasses");

                    b.Navigation("JobCardTypeCategories");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardClass", b =>
                {
                    b.Navigation("JobCardCategoryClasses");

                    b.Navigation("JobCardClassGroups");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGenre", b =>
                {
                    b.Navigation("JobCardGroupGenres");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardGroup", b =>
                {
                    b.Navigation("JobCardClassGroups");

                    b.Navigation("JobCardGroupGenres");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardPriorityLevel", b =>
                {
                    b.Navigation("JobCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardStatus", b =>
                {
                    b.Navigation("JobCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.JobCardType", b =>
                {
                    b.Navigation("JobCardTypeCategories");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskPortfolios");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.ProjectRegistry.ServiceProject", b =>
                {
                    b.Navigation("JobCards");

                    b.Navigation("ServiceDeskProjectAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsActivityLog", b =>
                {
                    b.Navigation("SystemsAuditEvents");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsAuditEvent", b =>
                {
                    b.Navigation("SystemsChangeLogs");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessCurrency", b =>
                {
                    b.Navigation("CustomerInvoices");

                    b.Navigation("CustomerPayments");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsBusinessProfile", b =>
                {
                    b.Navigation("SystemsBusinessCurrencies");

                    b.Navigation("SystemsBusinessLicenses");

                    b.Navigation("SystemsUsers");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCity", b =>
                {
                    b.Navigation("SystemsContactDetails");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsContactDetail", b =>
                {
                    b.Navigation("CustomerProfiles");

                    b.Navigation("ServiceOfficerProfiles");

                    b.Navigation("SystemsBusinessProfiles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCountry", b =>
                {
                    b.Navigation("SystemsCities");

                    b.Navigation("SystemsContactDetails");

                    b.Navigation("SystemsCountryPhoneCodes");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsCurrency", b =>
                {
                    b.Navigation("SystemsCountries");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsModule", b =>
                {
                    b.Navigation("SystemsAuditEvents");

                    b.Navigation("SystemsPages");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsNotification", b =>
                {
                    b.Navigation("SystemsUserNotifications");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsNotificationType", b =>
                {
                    b.Navigation("SystemsNotifications");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.Systems.SystemsPage", b =>
                {
                    b.Navigation("SystemsAuditEvents");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklist", b =>
                {
                    b.Navigation("JobCardChecklistTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobCardChecklistTemplate", b =>
                {
                    b.Navigation("JobCardChecklistTemplateTasks");

                    b.Navigation("JobCardChecklists");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TaskRegistry.JobTask", b =>
                {
                    b.Navigation("JobCardChecklistTasks");

                    b.Navigation("JobCardChecklistTemplateTasks");

                    b.Navigation("JobTaskSteps");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDesk", b =>
                {
                    b.Navigation("ServiceDeskMembers");

                    b.Navigation("ServiceDeskPortfolios");

                    b.Navigation("ServiceDeskProjectAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceDeskMember", b =>
                {
                    b.Navigation("JobCardAllocations");

                    b.Navigation("ServiceTicketAllocations");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerDesignation", b =>
                {
                    b.Navigation("ServiceOfficerProfiles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TechnicianRegistry.ServiceOfficerProfile", b =>
                {
                    b.Navigation("JobCardChecklistTasks");

                    b.Navigation("ServiceDeskMembers");

                    b.Navigation("ServiceTicketTasks");

                    b.Navigation("TravelPlanBookings");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicket", b =>
                {
                    b.Navigation("CustomerServiceTickets");

                    b.Navigation("JobCards");

                    b.Navigation("ServiceTicketAllocations");

                    b.Navigation("ServiceTicketAttachments");

                    b.Navigation("ServiceTicketTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketAllocation", b =>
                {
                    b.Navigation("CustomerServiceTicketTasks");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketCategory", b =>
                {
                    b.Navigation("ServiceDeskPortfolios");

                    b.Navigation("ServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketPriorityLevel", b =>
                {
                    b.Navigation("ServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketStatus", b =>
                {
                    b.Navigation("ServiceTickets");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TicketRegistry.ServiceTicketTask", b =>
                {
                    b.Navigation("ServiceTicketTaskSteps");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelEvent", b =>
                {
                    b.Navigation("TravelIteneraries");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelItenerary", b =>
                {
                    b.Navigation("JobTimeCards");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelPlan", b =>
                {
                    b.Navigation("TravelPlanBooking");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.TravelRegistry.TravelPlanBooking", b =>
                {
                    b.Navigation("TravelIteneraries");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsFunctionalRole", b =>
                {
                    b.Navigation("FunctionalRoles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsRole", b =>
                {
                    b.Navigation("FunctionalRoles");

                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUser", b =>
                {
                    b.Navigation("CustomerProfiles");

                    b.Navigation("Logins");

                    b.Navigation("ServiceOfficerProfiles");

                    b.Navigation("SystemsActivityLogs");

                    b.Navigation("SystemsUserDevices");

                    b.Navigation("SystemsUserNotifications");

                    b.Navigation("Tokens");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnClocService.Core.Entities.UserRegistry.SystemsUserDevice", b =>
                {
                    b.Navigation("SystemsUserDeviceLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
